---
name: "Check docker-openvpn upstream"

on:
  schedule:
    # Check daily at 6 AM UTC
    - cron: '0 6 * * *'
  workflow_dispatch:

jobs:
  check-upstream:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Check GitLab for new commits
        id: check-commits
        run: |
          # Get latest commit from GitLab
          LATEST_COMMIT=$(curl -s "https://gitlab.com/api/v4/projects/24751406/repository/commits?ref_name=master&per_page=1" | jq -r '.[0].id')
          echo "latest_commit=$LATEST_COMMIT" >> $GITHUB_OUTPUT
          
          # Check if we have this commit tracked
          if [ ! -f .github/upstream-tracking/docker-openvpn-last-commit ]; then
            mkdir -p .github/upstream-tracking
            echo "$LATEST_COMMIT" > .github/upstream-tracking/docker-openvpn-last-commit
            echo "is_new=false" >> $GITHUB_OUTPUT
          else
            LAST_KNOWN=$(cat .github/upstream-tracking/docker-openvpn-last-commit)
            if [ "$LATEST_COMMIT" != "$LAST_KNOWN" ]; then
              echo "is_new=true" >> $GITHUB_OUTPUT
              echo "$LATEST_COMMIT" > .github/upstream-tracking/docker-openvpn-last-commit
            else
              echo "is_new=false" >> $GITHUB_OUTPUT
            fi
          fi

      - name: Get commit details
        if: steps.check-commits.outputs.is_new == 'true'
        id: commit-details
        run: |
          COMMIT_MSG=$(curl -s "https://gitlab.com/api/v4/projects/24751406/repository/commits/${{ steps.check-commits.outputs.latest_commit }}" | jq -r '.message')
          COMMIT_URL="https://gitlab.com/domrod/docker-openvpn/-/commit/${{ steps.check-commits.outputs.latest_commit }}"
          echo "commit_message=$COMMIT_MSG" >> $GITHUB_OUTPUT
          echo "commit_url=$COMMIT_URL" >> $GITHUB_OUTPUT

      - name: Create issue for new upstream changes
        if: steps.check-commits.outputs.is_new == 'true'
        uses: actions/github-script@v7
        with:
          script: |
            const { data: issues } = await github.rest.issues.listForRepo({
              owner: context.repo.owner,
              repo: context.repo.repo,
              labels: ['upstream-update', 'docker-openvpn'],
              state: 'open'
            });
            
            if (issues.length === 0) {
              await github.rest.issues.create({
                owner: context.repo.owner,
                repo: context.repo.repo,
                title: 'ðŸ”„ docker-openvpn upstream update available',
                body: `New changes detected in upstream domrod/docker-openvpn repository:
                
                **Latest Commit:** ${{ steps.check-commits.outputs.latest_commit }}
                **Message:** ${{ steps.commit-details.outputs.commit_message }}
                **URL:** ${{ steps.commit-details.outputs.commit_url }}
                
                Please review the upstream changes and update the docker-openvpn container if needed.
                
                **Current Status:**
                - âœ… Version tracking: Automatic via GitLab API
                - âœ… Security improvements: Non-root user added  
                - âœ… Best practices: COPY instead of ADD
                
                **Action needed:**
                - [ ] Review upstream Dockerfile changes
                - [ ] Update base Alpine version if needed
                - [ ] Test updated container
                - [ ] Close this issue when complete`,
                labels: ['upstream-update', 'docker-openvpn']
              });
            }

      - name: Commit tracking file changes
        if: steps.check-commits.outputs.is_new == 'true'
        run: |
          git config --global user.name 'github-actions[bot]'
          git config --global user.email 'github-actions[bot]@users.noreply.github.com'
          git add .github/upstream-tracking/docker-openvpn-last-commit
          git commit -m "track: Update docker-openvpn upstream commit tracking"
          git push